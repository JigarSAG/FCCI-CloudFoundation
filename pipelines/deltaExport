#!/usr/bin/env groovy

pipeline 
{
    agent any 
       environment 
	{
	// initialize the variables

		HOME_DIR= "${WORKSPACE}"
		project = ""
 	}
    stages 
	{
	 stage('Initialize Repo')
	  {  
	   steps 
		{
		  script {
			iPaasEnv = iPaasEnv.trim()
			echo "${iPaasEnv}"

			source_environment_hostname = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i hostname | cut -d '"' -f2 ''' ).trim()
			source_environment_port = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i port | cut -d '"' -f2 ''' ).trim()
			//admin_user = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i admin_username | cut -d '"' -f2 ''' ).trim()
			source_type = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i type | cut -d '"' -f2 ''' ).trim()
			repo_user = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/repo.yml | grep -i user | cut -d '"' -f2 ''' ).trim()
			LOCAL_DEV_URL = "https://${source_environment_hostname}:${source_environment_port}"
		//	LOCAL_DEV_URL = "https://${source_environment_hostname}"
			onprem_user = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i onprem_username | cut -d '"' -f2 ''' ).trim()  
            onprem_pwd = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i onprem_pwd | cut -d '"' -f2 ''' ).trim() 
            onpremurl = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i onprem_url | cut -d '"' -f2 ''' ).trim()
            onpremport = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i onprem_prt | cut -d '"' -f2 ''' ).trim()
            inturl="${onpremurl}:${onpremport}"
			}
			
		echo "${source_environment_hostname}"
		echo "${source_environment_port}"
      	echo "${admin_user}"
		echo "${source_type}"
		echo "${repo_user}"
		echo "${HOME_DIR}"
		}
	   }
	   
	
	
	stage('Check assets')
	 {
         steps {
		sh 'pwd'
		sh 'ls -lrt'
		script{
		//def LOCAL_DEV_URL = "${source_environment}"
		//env.LOCAL_DEV_URL = LOCAL_DEV_URL
		//def LOCAL_DEV_URL = "https://${source_environment_hostname}:${source_environment_port}"
		echo "${LOCAL_DEV_URL}"
		}

		script{
                echo "Check assets to export of the project"
				sh '''
				pwd
				ls -lrt
				'''
				

            	sh "ls -lat"
				env.ioIntUrl=LOCAL_DEV_URL
				echo "io INT url is : ${ioIntUrl}"

				env.premurl=inturl
				echo "on-prem url is : ${premurl}"



				dir(repoName)
		 			{ 
		   			sh 'pwd'
	   	   			sh 'ls -ltr' 	
						echo "checkout"
						script {
							git branch: '${branchName}',
                			credentialsId: 'webm_credentials',
                			url: 'https://code.medtronic.com/integration_tech/webmethods.io/${repoName}.git'

            				sh "ls -lat"
								}		
						
						
							echo "check if project exists in io"
							
							sh '''
							
							PROJECT_URL=${ioIntUrl}/apis/v1/rest/projects/${projectName}
							name=$(curl --insecure --verbose --location --request GET ${PROJECT_URL} --header 'Accept: application/json' -u ${admin_user}:${admin_password} | grep -o '"name":"[^"]*' | grep -o '[^"]*$')
							
							if [ -z "$name" ];   then
							echo "Project does not exists."
							exit 1
							
							else
								echo "Project exixts with name: ${name}"
								echo $(pwd)
								echo $(ls -lrt)
								cd $iPaasEnv
								##DIR="./wmioINT/$projectName/"
								DIR="./$projectName/"
								if [ -d "$DIR" ]; then							
									echo "Project Exists in repo and start exporting the assets..."
									sh 'pwd'
									sh 'ls -ltr'
							
								else
								echo "Project directory not present. Create directory.."
								
								mkdir -p ${projectName}
								##cd $projectName
								##cp -r projectStr ./
								cp -r $HOME_DIR/projectStr/* ${projectName}/
								git add $projectName
								cd $projectName

								fi
							fi
							sh '''
						
						
						echo "Check flowservices"
				        	if ("${flowservices}" == '')
							{
								echo "No flowservices to export"
					      	}
					  		else 
  					    		{
									FS = "${flowservices}"
									echo "Flow services are : ${FS}"

									def fsNames = FS.split(',')
									echo "flowservices Names: ${fsNames}"

									for(FS in fsNames){
   									FS = FS.trim() 
									echo "$FS"
									
									echo "starting export of flowservices"

									env.FSName=FS
									echo "FS name is : ${FSName}"
									
									sh '''
									cd $HOME_DIR/$repoName/$iPaasEnv/$projectName/flowServices
									
									curl --location "$premurl/restv2/mdt_exportproject.resources:exportProject/exportFS?projectName=$projectName&flowservice=$FSName&ioUrl=$ioIntUrl" --output $FSName.zip -H 'Content-Type:application/json' -H 'x-HTTP-Method-Override:GET'

									echo "Checking in the repo to push the file"

									git add $FSName.zip
									git config --global user.name "shilpm2"
									git config --global user.email "shilpm2@locahost.com"
               					

									git commit -m "Add $FSName to repo"
									
									sh '''

								}
								

									withCredentials([gitUsernamePassword(credentialsId: 'webm_credentials', gitToolName: 'Default')]) 									{
                    				sh "git push -u origin $branchName"
									}
							}
							
							echo "Check reference data"
				        	if ("${referenceData}" == '')
							{
								echo "No referenceData to export"
					      	}
					  		else 
  					    		{
									refData = "${referenceData}"
									echo "ref data are : ${refData}"

									def refDataNames = refData.split(',')
									echo "referenceData Names: ${refDataNames}"

									for(refData in refDataNames){
   									refData = refData.trim() 
									echo "$refData"
									
									echo "starting export of referenceData"

									env.refDataName=refData
									echo "refData name is : ${refDataName}"
									
									sh '''
									cd $HOME_DIR/$repoName/$iPaasEnv/$projectName/configs/$wmioenv
									
									REF_DATA_URL=${ioIntUrl}/apis/v1/rest/projects/${projectName}/referencedata/${refDataName}
									
									rdJson=$(curl --location --request GET ${REF_DATA_URL} --header 'Content-Type: application/json' --header 'Accept: application/json' -u ${admin_user}:${admin_password})
									
									##rdExport=$(echo "$rdJson" | jq '.output // empty')
									rdExport=$(echo "$rdJson" | grep -o '"name":"[^"]*' | grep -o '[^"]*$')
									if [ -z "$rdExport" ];   then
										echo "Export failed:" ${rdJson}
									else
										##columnDelimiter=$(echo "$rdJson" | jq -c -r '.output.columnDelimiter')
										columnDelimiter=$(echo "$rdJson" | grep -o '"columnDelimiter":"[^"]*' | grep -o '[^"]*$')
										echo $columnDelimiter
										##rdExport=$(echo "$rdJson" | jq -c -r '.output.dataRecords')
										dataRecs=$(echo "$rdJson" | grep -o '"dataRecords":"[^"]*' | grep -o '[^"]*$')
										echo $dataRecs
										echo "Check on column delimiter"
										if [[ "$columnDelimiter" == "," ]]; then
											echod "COMMA"
											##datajson=$(echo "$rdExport" | jq -c -r '(map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, ##$rows[] | @csv')
											datajson=$(echo "$dataRecs" | grep -o '(map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv')
										else
											echod "Not a COMMA:" ${columnDelimiter}
											datajson=$(echo "$dataRecs" | grep -o '(map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv' | sed "s/\",\"/\"${columnDelimiter}\"/g")
										fi
										
										
    
										metadataJson=$(echo "$rdJson" | jq -c -r '.output')
										metadataJson=$(echo "$metadataJson"| jq 'del(.columnNames, .dataRecords, .revisionData)')
										echo "$metadataJson" > metadata.json
										echo "$datajson" > ${source_type}.csv
										cp -n ./${source_type}.csv dev.csv 
										cp -n ./${source_type}.csv qa.csv 
										cp -n ./${source_type}.csv prod.csv
										
      
									fi


									echo "Checking in the repo to push the file"

									git add $FSName.zip
									git config --global user.name "shilpm2"
									git config --global user.email "shilpm2@locahost.com"
               					

									git commit -m "Add $FSName to repo"
									
									sh '''

								}
								

									withCredentials([gitUsernamePassword(credentialsId: 'webm_credentials', gitToolName: 'Default')]) 									{
                    				sh "git push -u origin $branchName"
									}
							}
 }
}
 }
        
	}
}
}

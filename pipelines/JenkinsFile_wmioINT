#!/usr/bin/env groovy

pipeline 
{
    agent any 
       environment 
	{
	// initialize the variables

		HOME_DIR= "${WORKSPACE}"
		project = ""
		//projectId = "flad731d4eed2f54dd9123e8"
 	}
    stages 
	{
	 stage('Initialize Repo')
	  {  
	   steps 
		{
		  script {
			iPaasEnv = iPaasEnv.trim()
			echo "${iPaasEnv}"

			source_environment_hostname = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i hostname | cut -d '"' -f2 ''' ).trim()
			source_environment_port = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i port | cut -d '"' -f2 ''' ).trim()
			//admin_user = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i admin_username | cut -d '"' -f2 ''' ).trim()
			source_type = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i type | cut -d '"' -f2 ''' ).trim()
			repo_user = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/repo.yml | grep -i user | cut -d '"' -f2 ''' ).trim()
			LOCAL_DEV_URL = "https://${source_environment_hostname}:${source_environment_port}"
		//	LOCAL_DEV_URL = "https://${source_environment_hostname}"
			}
			
		echo "${source_environment_hostname}"
		echo "${source_environment_port}"
      	echo "${admin_user}"
		echo "${source_type}"
		echo "${repo_user}"
		echo "${HOME_DIR}"
		}
	   }
	   
	
	
	stage('Sync Projects')
	 {
         steps {
		sh 'pwd'
		sh 'ls -lrt'
		script{
		//def LOCAL_DEV_URL = "${source_environment}"
		//env.LOCAL_DEV_URL = LOCAL_DEV_URL
		//def LOCAL_DEV_URL = "https://${source_environment_hostname}:${source_environment_port}"
		echo "${LOCAL_DEV_URL}"
		}

		script{
                echo "Create / Sychronize the projects"
				sh '''
				pwd
				ls -lrt
				'''
				

            sh "ls -lat"
				

				dir(repoName)
		 			{ 
		   			sh 'pwd'
	   	   			sh 'ls -ltr' 	
						echo "checkout"
						script {
				git branch: 'testJenkins',
                credentialsId: 'webm_credentials',
                url: 'https://code.medtronic.com/integration_tech/webmethods.io/${repoName}.git'

            sh "ls -lat"
				}	
			             	echo "Project Check"
					if ("${projectNames}" == 'All')
						{
						echo "Select all projects for wmioINT"
						project = sh (script: ''' ls wmioINT -m ''', returnStdout: true).trim()
						echo "Project is : ${project}"
					      }
					  else 
  					    {
						project = "${projectNames}"
						echo "Project is : ${project}"
					}
					
			              	echo "Project before split is : ${project}"
					def projNames = project.split(',')
					echo "Project Names: ${projNames}"
					for(project in projNames){
   						project = project.trim() 
						echo "$project"
						echo "Check if Project Exists in repo..."
						DIR="./wmioINT/$project/"
						echo "${DIR}"
  						//if ( -d '$DIR' ); then
						if (fileExists("${DIR}"))
						{
						echo "Project Exists in repo and check to create/update Project in io..."
						sh 'pwd'
						sh 'ls -ltr'
						
						echo "calling scripts"
						
			            sh 'chmod +x ../scripts/*.sh'
						sh "../scripts/createProject.sh '${LOCAL_DEV_URL}' '${admin_user}' '${admin_password}' '${project}' "

						echo "Importing asset ..."
						 sh "../scripts/import_INT.sh '${LOCAL_DEV_URL}' '${admin_user}' '${admin_password}' '${repoName}' '${project}' '${HOME_DIR}' "
						}
				else{
                			echo "Project ${project} not found in Repo ${repoName}"
				}
				}
            }
 }
}
 }
        
	}
}

#!/usr/bin/env groovy

pipeline 
{
    agent any 
    environment 
	{
	// initialize the variables
		branch="${branchName}"
		apis = ""		
 	}

    stages 
	{
	 stage('Initialize Repo')
	  {  
	   steps 
		{
		  echo "----------------------------------Start Initialize Repo----------------------------------"
		  
		  script {
				source_environment_hostname = sh ( returnStdout: true, script: '''cat configs/wmioINT/DEV.yml | grep -i hostname | cut -d '"' -f2 ''' ).trim()
				source_environment_port = sh ( returnStdout: true, script: '''cat configs/wmioINT/DEV.yml | grep -i port | cut -d '"' -f2 ''' ).trim()
				admin_user = sh ( returnStdout: true, script: '''cat configs/wmioINT/DEV.yml | grep -i admin_username | cut -d '"' -f2 ''' ).trim()			
				LOCAL_DEV_URL = "https://${source_environment_hostname}:${source_environment_port}"        
			}
			
			echo "${source_environment_hostname}"
			echo "${source_environment_port}"
			echo "${admin_user}"
			echo "${LOCAL_DEV_URL}"
		
		}
	   }
	
	
	stage('Export Projects')
	 {
         steps {
		            sh 'pwd'
		            sh 'ls -lrt'
					
                    echo "----------------------------------Start exporting the project----------------------------------"
					
						script{
                            
							env.ioIntUrl=LOCAL_DEV_URL

			                dir('FCCI-CloudFoundation')
							{ 
		   			        sh 'pwd'
	   	   			        sh 'ls -ltr' 		
							echo "----------------------------------checkout Assets from DEV----------------------------------"
							script {
								git branch: 'DEV',
								credentialsId: 'JigarSAG',
								url: 'https://github.com/JigarSAG/FCCI-CloudFoundation.git'

								sh "ls -lat"
				                	}
							
							
								if ("${projectName}" == '')
								{
									echo "----------------------------------Project name is not given----------------------------------"
                                	exit 0
								}
                            	else
								{
									echo "----------------------------------Project name is ${projectName}----------------------------------"
									
									sh '''								

									cd export
									echo $(pwd)
									echo $(ls -lrt)

									cd project
									echo $(pwd)
									echo $(ls -lrt)

									echo ${ioIntUrl}

									importedName=$(curl --location --request POST ''${ioIntUrl}'/apis/v1/rest/projects/'${projectName}'/export' \
												--header 'Authorization: 'credentialsId: 'JigarSAG''')

									download_link=$(echo "$importedName" | grep -o '"download_link":"[^"]*' | grep -o '[^"]*$')

									##curl --location "$download_link" --output ${projectName}.zip -H 'Content-Type:application/json' -H 'x-HTTP-Method-Override:GET'
									curl --location --request GET ''$download_link'' --output ${projectName}.zip

									ls -lrt
									echo "${projectName}".zip
									cat  "${projectName}".zip | wc -l

									projContent=$(cat  "${projectName}".zip | wc -l)
									#projContent=$(zcat < "${projectName}".zip | grep -o '"statusofproject":"[^"]*' | grep -o '[^"]*$')
									echo $projContent
									
									##if [ ! -z "$projContent" ];   then
									 if [ $projContent -eq 2 ];   then
										echo "----------------------------------Export of Preoect failed----------------------------------" 
										rm ${projectName}.zip
										ls -lrt
										exit 1

									else
										echo "----------------------------------Export Succeeded----------------------------------"
										ls -lrt								
									fi

											echo "----------------------------------Project Exported Successfully----------------------------------"
											
											echo "----------------------------------Project File Checkin Started----------------------------------"
											
											echo $(pwd)
											echo $(ls -lrt)

											git add $projectName.zip
											git config --global user.name "Jigar Shah"
											git config --global user.email "jish@locahost.com"
											

											git commit -m "Add $projectName to repo"
											
											sh '''

											withCredentials([gitUsernamePassword(credentialsId: 'JigarSAG', gitToolName: 'Default')]) {
														sh "git push -u origin DEV"													
											}
											echo "----------------------------------Project File Checkin Started----------------------------------"		
								}	
						}
					}               
		}
	}	
 }
 }

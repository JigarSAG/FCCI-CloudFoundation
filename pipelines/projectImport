#!/usr/bin/env groovy

pipeline {
    agent any


    stages 
    {
        stage('Initialize Repo')
	  {  
	   steps 
		{
		  script {
			echo "${iPaasEnv}"

			source_environment_hostname = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i hostname | cut -d '"' -f2 ''' ).trim()
			source_environment_port = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i port | cut -d '"' -f2 ''' ).trim()
		//	admin_user = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i admin_username | cut -d '"' -f2 ''' ).trim()
			source_type = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/${wmioenv}.yml | grep -i type | cut -d '"' -f2 ''' ).trim()
			repo_user = sh ( returnStdout: true, script: '''cat configs/${iPaasEnv}/repo.yml | grep -i user | cut -d '"' -f2 ''' ).trim()
			ioint_url = "https://${source_environment_hostname}:${source_environment_port}"   
            //ioint_url="https://shilpadev.int-aws-de.webmethods.io:443"
			}
			
		echo "${source_environment_hostname}"
		echo "${source_environment_port}"
    		echo "${admin_user}"
		echo "${source_type}"
		echo "${repo_user}"
		echo "${ioint_url}"
		}
	   }

        stage("Checkout Repository") 
        {
            steps 
            {
                echo "checkout repo"
                script{
                            
							env.inturl=ioint_url
                            echo "io url is ${inturl}"
                            
                    dir(repoName)
		 			{ 
		   			sh 'pwd'
	   	   			sh 'ls -ltr' 	
				
						script {
				            git branch: '${branchName}',
                            credentialsId: 'webm_credentials',
                            url: 'https://code.medtronic.com/integration_tech/webmethods.io/${repoName}.git'

                            sh "ls -lat"
				            }
                
                        echo "check if project zip exists in repo"

                        sh '''
                        echo $(pwd)

                        cd $iPaasEnv
						echo $(pwd)
						echo $(ls -lrt)

                        cd projectExports_prd
						echo $(pwd)
						echo $(ls -lrt)
                        
                        
                        echo "checking if project file exists in repo"
                        
                       ## fileexist = ls | grep ${ProjectName}.zip

                       FILE=./${ProjectName}.zip
                        echo "proj exists ${fileexist}"

                
                    pwd
                    ls -lrt
                

                     if [ -f "$FILE" ]; then
                    
                    
                    echo "project file exists, starting to import..."

                    curl -v --location $inturl/apis/v1/rest/project-import \
                        --form project=@${ProjectName}.zip \
                        --form new_project_name=${ProjectName} -u ${admin_user}:${admin_password}
                    
                    
                    echo "Project imported successfully: ${ProjectName}"
                    
                    else
                    
                        echo "No file found to import for project ${ProjectName}"
                    fi
                    sh '''
                    

            }
            }

            }
        }

    }
}
